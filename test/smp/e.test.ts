import assert from "node:assert";
import { describe, it } from "node:test";

import { Smp } from "../../src/smp/Smp";

describe("Test SMP functions", () => {
  it("e", async () => {
    const smp = new Smp();
    const key = new Uint8Array([
      0xe9, 0xd7, 0x8f, 0x18, 0x0c, 0xb2, 0x1d, 0xff, 0xe6, 0x10, 0x76, 0x65, 0xa1, 0xf1, 0xe2, 0xe2,
    ]);
    const plaintextData = new Uint8Array([
      0xb3, 0xe0, 0x5c, 0x03, 0xf0, 0x4b, 0x5b, 0x10, 0xb1, 0xc6, 0x78, 0xfd, 0x70, 0x14, 0x43, 0xd2,
    ]);
    const exp = new Uint8Array([
      0xcb, 0x79, 0xac, 0xd0, 0xbd, 0xe9, 0x15, 0xbe, 0x9e, 0xa1, 0xc1, 0x22, 0x0f, 0x94, 0x93, 0x0f,
    ]);

    const result = await smp.e(key, plaintextData);
    assert.deepStrictEqual(result, exp);
  });

  it("ah", async () => {
    // IRK            ec0234a3 57c8ad05 341010a6 0a397d9b
    // prand          00000000 00000000 00000000 00708194
    // M              00000000 00000000 00000000 00708194
    // AES_128        159d5fb7 2ebe2311 a48c1bdc c40dfbaa
    // ah             0dfbaa
    const smp = new Smp();
    const irk = new Uint8Array([
      0x9b, 0x7d, 0x39, 0x0a, 0xa6, 0x10, 0x10, 0x34, 0x05, 0xad, 0xc8, 0x57, 0xa3, 0x34, 0x02, 0xec,
    ]);
    const r = new Uint8Array([0x94, 0x81, 0x70]);
    const exp = new Uint8Array([0xaa, 0xfb, 0x0d]);

    const result = await smp.ah(irk, r);

    assert.deepStrictEqual(result, exp);
  });

  it("c1", async () => {
    const k = new Uint8Array([
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]);
    const r = new Uint8Array([
      0xe0, 0x2e, 0x70, 0xc6, 0x4e, 0x27, 0x88, 0x63, 0x0e, 0x6f, 0xad, 0x56, 0x21, 0xd5, 0x83, 0x57,
    ]);

    const preq = new Uint8Array([0x01, 0x01, 0x00, 0x00, 0x10, 0x07, 0x07]);
    const pres = new Uint8Array([0x02, 0x03, 0x00, 0x00, 0x08, 0x00, 0x05]);
    const iat = new Uint8Array([0x01]);
    const rat = new Uint8Array([0x00]);
    const ra = new Uint8Array([0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1]);
    const ia = new Uint8Array([0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1]);
    const exp = new Uint8Array([
      0x86, 0x3b, 0xf1, 0xbe, 0xc5, 0x4d, 0xa7, 0xd2, 0xea, 0x88, 0x89, 0x87, 0xef, 0x3f, 0x1e, 0x1e,
    ]);

    const smp = new Smp();
    const res = await smp.c1(k, r, preq, pres, iat, ia, rat, ra);

    assert.deepStrictEqual(res, exp);
  });

  it("s2", async () => {
    const k = new Uint8Array([
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]);
    const r1 = new Uint8Array([0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11]);
    const r2 = new Uint8Array([0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99]);
    const exp = new Uint8Array([
      0x62, 0xa0, 0x6d, 0x79, 0xae, 0x16, 0x42, 0x5b, 0x9b, 0xf4, 0xb0, 0xe8, 0xf0, 0xe1, 0x1f, 0x9a,
    ]);

    const smp = new Smp();
    const res = await smp.s1(k, r1, r2);

    assert.deepStrictEqual(res, exp);
  });
});
